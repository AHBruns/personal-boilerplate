{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nvar defaultLiteralToTreeItem = function defaultLiteralToTreeItem(literal) {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          \"class\": \"prettyprint\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n  }\n};\n\nvar objectToTreeItem = function objectToTreeItem(object, literalToTreeItem) {\n  return _Object$entries(object).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return __jsx(TreeItem, {\n      nodeId: uuid(),\n      label: key.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, toTreeItems(value, literalToTreeItem));\n  });\n};\n\nvar toTreeItems = function toTreeItems(thing, customLiteralToTreeItem) {\n  var literalToTreeItem = customLiteralToTreeItem === undefined ? defaultLiteralToTreeItem : customLiteralToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (_JSON$stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport var ObjectTree = function ObjectTree(_ref3) {\n  var object = _ref3.object,\n      customLiteralToTreeItem = _ref3.customLiteralToTreeItem,\n      className = _ref3.className;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }),\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, toTreeItems(object, customLiteralToTreeItem)));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["Head","TreeView","TreeItem","MdExpandMore","MdChevronRight","uuid","defaultLiteralToTreeItem","literal","toString","objectToTreeItem","object","literalToTreeItem","map","key","value","toTreeItems","thing","customLiteralToTreeItem","undefined","ObjectTree","className"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,OAAO,EAAI;AAC1C,UAAQ,OAAOA,OAAf;AACE,SAAK,UAAL;AACE,aACE,MAAC,QAAD;AACE,QAAA,MAAM,EAAEF,IAAI,EADd;AAEE,QAAA,KAAK,EAAE;AAAK,mBAAM,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BE,OAAO,CAACC,QAAR,EAA1B,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF;AACE,aAAO,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEH,IAAI,EAAtB;AAA0B,QAAA,KAAK,EAAEE,OAAO,CAACC,QAAR,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AATJ;AAWD,CAZD;;AAcA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAASC,iBAAT;AAAA,SACvB,gBAAeD,MAAf,EAAuBE,GAAvB,CAA2B;AAAA;AAAA,QAAEC,GAAF;AAAA,QAAOC,KAAP;;AAAA,WACzB,MAAC,QAAD;AAAU,MAAA,MAAM,EAAET,IAAI,EAAtB;AAA0B,MAAA,KAAK,EAAEQ,GAAG,CAACL,QAAJ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,WAAW,CAACD,KAAD,EAAQH,iBAAR,CADd,CADyB;AAAA,GAA3B,CADuB;AAAA,CAAzB;;AAOA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,uBAAR,EAAoC;AACtD,MAAIN,iBAAiB,GACnBM,uBAAuB,KAAKC,SAA5B,GACIZ,wBADJ,GAEIW,uBAHN;;AAKA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAI,gBAAeA,KAAf,MAA0B,IAA9B,EAAoC,OAAO,2BAAP,CAApC,KACK,OAAOP,gBAAgB,CAACO,KAAD,EAAQL,iBAAR,CAAvB;AACN,GAJD,MAIO,OAAOA,iBAAiB,CAACK,KAAD,CAAxB;AACR,CAXD;;AAaA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,QAAoD;AAAA,MAAjDT,MAAiD,SAAjDA,MAAiD;AAAA,MAAzCO,uBAAyC,SAAzCA,uBAAyC;AAAA,MAAhBG,SAAgB,SAAhBA,SAAgB;AAC5E,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,GAAG,EAAC,gFAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB;AAEE,IAAA,iBAAiB,EAAE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGE,IAAA,SAAS,EAAEA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,WAAW,CAACL,MAAD,EAASO,uBAAT,CALd,CAJF,CADF;AAcD,CAfM","sourcesContent":["import Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst defaultLiteralToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint\">{literal.toString()}</pre>}\n        />\n      );\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = (object, literalToTreeItem) =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value, literalToTreeItem)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = (thing, customLiteralToTreeItem) => {\n  let literalToTreeItem =\n    customLiteralToTreeItem === undefined\n      ? defaultLiteralToTreeItem\n      : customLiteralToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, customLiteralToTreeItem, className }) => {\n  return (\n    <>\n      <Head>\n        <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n      </Head>\n      <TreeView\n        defaultCollapseIcon={<MdExpandMore />}\n        defaultExpandIcon={<MdChevronRight />}\n        className={className}\n      >\n        {toTreeItems(object, customLiteralToTreeItem)}\n      </TreeView>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}