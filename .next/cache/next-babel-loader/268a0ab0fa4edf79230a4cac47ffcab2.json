{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nvar toTreeItems = function toTreeItems(object) {\n  switch (typeof object) {\n    case \"object\":\n      {}\n\n    default:\n      {\n        __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: object.toString(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        });\n      }\n  }\n\n  var entries = _Object$entries(object);\n\n  return entries.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    switch (typeof key) {}\n\n    switch (typeof value) {\n      case \"number\":\n        return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        });\n\n      case \"string\":\n        return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }));\n\n      case \"object\":\n        if (_JSON$stringify(value) === \"{}\") return __jsx(React.Fragment, null);\n\n        if (_Array$isArray(value)) {\n          var arrayEntries = _Object$values(value);\n\n          return arrayEntries.map(toTreeItems);\n        } else return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, toTreeItems(value));\n\n      default:\n        return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: \"UNKNOWN TYPE: \".concat(typeof value),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }));\n    }\n  });\n};\n\nexport var ObjectTree = function ObjectTree(_ref3) {\n  var object = _ref3.object;\n  return __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdExpandLess, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, toTreeItems(object));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["TreeView","TreeItem","MdExpandLess","MdExpandMore","uuid","toTreeItems","object","toString","entries","map","key","value","arrayEntries","ObjectTree"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,MAAM,EAAI;AAC5B,UAAQ,OAAOA,MAAf;AACE,SAAK,QAAL;AAAe,OACd;;AACD;AAAS;AACP,cAAC,QAAD;AAAU,UAAA,MAAM,EAAEF,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEE,MAAM,CAACC,QAAP,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AALH;;AAQA,MAAMC,OAAO,GAAG,gBAAeF,MAAf,CAAhB;;AAEA,SAAOE,OAAO,CAACC,GAAR,CAAY,gBAAkB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AACnC,YAAQ,OAAOD,GAAf;;AAGA,YAAQ,OAAOC,KAAf;AACE,WAAK,QAAL;AACE,eAAO,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEP,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEM,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF,WAAK,QAAL;AACE,eACE,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEN,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEM,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEN,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEO,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;;AAKF,WAAK,QAAL;AACE,YAAI,gBAAeA,KAAf,MAA0B,IAA9B,EAAoC,OAAO,2BAAP;;AACpC,YAAI,eAAcA,KAAd,CAAJ,EAA0B;AACxB,cAAMC,YAAY,GAAG,eAAcD,KAAd,CAArB;;AACA,iBAAOC,YAAY,CAACH,GAAb,CAAiBJ,WAAjB,CAAP;AACD,SAHD,MAIE,OACE,MAAC,QAAD;AAAU,UAAA,MAAM,EAAED,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEM,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGL,WAAW,CAACM,KAAD,CADd,CADF;;AAKJ;AACE,eACE,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEP,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEM,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEN,IAAI,EAAtB;AAA0B,UAAA,KAAK,0BAAmB,OAAOO,KAA1B,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AArBJ;AA2BD,GA/BM,CAAP;AAgCD,CA3CD;;AA6CA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAGP,MAAH,SAAGA,MAAH;AAAA,SACxB,MAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB;AAEE,IAAA,iBAAiB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGD,WAAW,CAACC,MAAD,CAJd,CADwB;AAAA,CAAnB","sourcesContent":["import { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst toTreeItems = object => {\n  switch (typeof object) {\n    case \"object\": {\n    }\n    default: {\n      <TreeItem nodeId={uuid()} label={object.toString()} />;\n    }\n  }\n\n  const entries = Object.entries(object);\n\n  return entries.map(([key, value]) => {\n    switch (typeof key) {\n    }\n\n    switch (typeof value) {\n      case \"number\":\n        return <TreeItem nodeId={uuid()} label={key}></TreeItem>;\n      case \"string\":\n        return (\n          <TreeItem nodeId={uuid()} label={key}>\n            <TreeItem nodeId={uuid()} label={value} />\n          </TreeItem>\n        );\n      case \"object\":\n        if (JSON.stringify(value) === \"{}\") return <></>;\n        if (Array.isArray(value)) {\n          const arrayEntries = Object.values(value);\n          return arrayEntries.map(toTreeItems);\n        } else\n          return (\n            <TreeItem nodeId={uuid()} label={key}>\n              {toTreeItems(value)}\n            </TreeItem>\n          );\n      default:\n        return (\n          <TreeItem nodeId={uuid()} label={key}>\n            <TreeItem nodeId={uuid()} label={`UNKNOWN TYPE: ${typeof value}`} />\n          </TreeItem>\n        );\n    }\n  });\n};\n\nexport const ObjectTree = ({ object }) => (\n  <TreeView\n    defaultCollapseIcon={<MdExpandMore />}\n    defaultExpandIcon={<MdExpandLess />}\n  >\n    {toTreeItems(object)}\n  </TreeView>\n);\n"]},"metadata":{},"sourceType":"module"}