{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nvar literalToTreeItem = function literalToTreeItem(literal) {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          \"class\": \"prettyprint lang-js\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n\n    case \"string\":\n      {\n        if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\")) return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: _JSXStyle.dynamic([[\"2726034019\", [literal]]]) + \" \" + \"rgba-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: literal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        })), __jsx(_JSXStyle, {\n          id: \"2726034019\",\n          dynamic: [literal],\n          __self: this\n        }, \".rgba-wrapper.__jsx-style-dynamic-selector{color:\".concat(literal, \";}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy92b25uZWd1dC9kcml2ZS9wZXJzb25hbC1mcm9udGVuZC1ib2lsZXJwbGF0ZS9jb21wb25lbnRzL09iamVjdFRyZWUuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCd0IsQUFHb0QsbUNBQ3JDIiwiZmlsZSI6Ii9Vc2Vycy92b25uZWd1dC9kcml2ZS9wZXJzb25hbC1mcm9udGVuZC1ib2lsZXJwbGF0ZS9jb21wb25lbnRzL09iamVjdFRyZWUuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhlYWQgZnJvbSBcIm5leHQvaGVhZFwiO1xuaW1wb3J0IHsgVHJlZVZpZXcsIFRyZWVJdGVtIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9sYWJcIjtcbmltcG9ydCB7IE1kRXhwYW5kTW9yZSwgTWRDaGV2cm9uUmlnaHQgfSBmcm9tIFwicmVhY3QtaWNvbnMvbWRcIjtcbmltcG9ydCB1dWlkIGZyb20gXCJ1dWlkL3Y0XCI7XG5cbmNvbnN0IGxpdGVyYWxUb1RyZWVJdGVtID0gbGl0ZXJhbCA9PiB7XG4gIHN3aXRjaCAodHlwZW9mIGxpdGVyYWwpIHtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxUcmVlSXRlbVxuICAgICAgICAgIG5vZGVJZD17dXVpZCgpfVxuICAgICAgICAgIGxhYmVsPXs8cHJlIGNsYXNzPVwicHJldHR5cHJpbnQgbGFuZy1qc1wiPntsaXRlcmFsLnRvU3RyaW5nKCl9PC9wcmU+fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgIGlmIChsaXRlcmFsLnN0YXJ0c1dpdGgoXCJyZ2JhKFwiKSAmJiBsaXRlcmFsLmVuZHNXaXRoKFwiKVwiKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZ2JhLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPFRyZWVJdGVtIG5vZGVJZD17dXVpZCgpfSBsYWJlbD17bGl0ZXJhbH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgICAgICAucmdiYS13cmFwcGVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtsaXRlcmFsfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICAgIDwvPlxuICAgICAgICApO1xuICAgICAgZWxzZSByZXR1cm4gPFRyZWVJdGVtIG5vZGVJZD17dXVpZCgpfSBsYWJlbD17bGl0ZXJhbH0gLz47XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPFRyZWVJdGVtIG5vZGVJZD17dXVpZCgpfSBsYWJlbD17bGl0ZXJhbC50b1N0cmluZygpfSAvPjtcbiAgfVxufTtcblxuY29uc3Qgb2JqZWN0VG9UcmVlSXRlbSA9IG9iamVjdCA9PlxuICBPYmplY3QuZW50cmllcyhvYmplY3QpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoXG4gICAgPFRyZWVJdGVtIG5vZGVJZD17dXVpZCgpfSBsYWJlbD17a2V5LnRvU3RyaW5nKCl9PlxuICAgICAge3RvVHJlZUl0ZW1zKHZhbHVlKX1cbiAgICA8L1RyZWVJdGVtPlxuICApKTtcblxuY29uc3QgdG9UcmVlSXRlbXMgPSB0aGluZyA9PiB7XG4gIGlmICh0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIpIHtcbiAgICAvLyBkb24ndCByZW5kZXIgZW1wdHkgb2JqZWN0c1xuICAgIGlmIChKU09OLnN0cmluZ2lmeSh0aGluZykgPT09IFwie31cIikgcmV0dXJuIDw+PC8+O1xuICAgIGVsc2UgcmV0dXJuIG9iamVjdFRvVHJlZUl0ZW0odGhpbmcpO1xuICB9IGVsc2UgcmV0dXJuIGxpdGVyYWxUb1RyZWVJdGVtKHRoaW5nKTtcbn07XG5cbmV4cG9ydCBjb25zdCBPYmplY3RUcmVlID0gKHsgb2JqZWN0LCBjbGFzc05hbWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvZ29vZ2xlL2NvZGUtcHJldHRpZnlAbWFzdGVyL2xvYWRlci9ydW5fcHJldHRpZnkuanNcIj48L3NjcmlwdD5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxUcmVlVmlld1xuICAgICAgICBkZWZhdWx0Q29sbGFwc2VJY29uPXs8TWRFeHBhbmRNb3JlIC8+fVxuICAgICAgICBkZWZhdWx0RXhwYW5kSWNvbj17PE1kQ2hldnJvblJpZ2h0IC8+fVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgID5cbiAgICAgICAge3RvVHJlZUl0ZW1zKG9iamVjdCl9XG4gICAgICA8L1RyZWVWaWV3PlxuICAgIDwvPlxuICApO1xufTtcbiJdfQ== */\\n/*@ sourceURL=/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx */\")));else return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: literal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      }\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n  }\n};\n\nvar objectToTreeItem = function objectToTreeItem(object) {\n  return _Object$entries(object).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return __jsx(TreeItem, {\n      nodeId: uuid(),\n      label: key.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, toTreeItems(value));\n  });\n};\n\nvar toTreeItems = function toTreeItems(thing) {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (_JSON$stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport var ObjectTree = function ObjectTree(_ref3) {\n  var object = _ref3.object,\n      className = _ref3.className;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }),\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, toTreeItems(object)));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["Head","TreeView","TreeItem","MdExpandMore","MdChevronRight","uuid","literalToTreeItem","literal","toString","startsWith","endsWith","objectToTreeItem","object","map","key","value","toTreeItems","thing","ObjectTree","className"],"mappings":"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","sourcesContent":["import Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint lang-js\">{literal.toString()}</pre>}\n        />\n      );\n    case \"string\": {\n      if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n        return (\n          <>\n            <div className=\"rgba-wrapper\">\n              <TreeItem nodeId={uuid()} label={literal} />\n            </div>\n            <style jsx>{`\n              .rgba-wrapper {\n                color: ${literal};\n              }\n            `}</style>\n          </>\n        );\n      else return <TreeItem nodeId={uuid()} label={literal} />;\n    }\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = object =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = thing => {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, className }) => {\n  return (\n    <>\n      <Head>\n        <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n      </Head>\n      <TreeView\n        defaultCollapseIcon={<MdExpandMore />}\n        defaultExpandIcon={<MdChevronRight />}\n        className={className}\n      >\n        {toTreeItems(object)}\n      </TreeView>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}