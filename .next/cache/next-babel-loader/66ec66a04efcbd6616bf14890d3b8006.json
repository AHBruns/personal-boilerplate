{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nvar literalToTreeItem = function literalToTreeItem(literal) {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          \"class\": \"prettyprint lang-js\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n\n    case \"string\":\n      {\n        //\n        // support for coloring rgba strings the color they encode is off for re-usability\n        //\n        // if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n        //   return (\n        //     <>\n        //       <div className=\"rgba-wrapper\">\n        //         <TreeItem nodeId={uuid()} label={literal} />\n        //       </div>\n        //       {/*\n        //        * Using jss because it's the cleanest way to inject these styles.\n        //        * makeStyles doesn't work because it's a hook & style prop is highly discouraged\n        //        */}\n        //       <style jsx>{`\n        //         .rgba-wrapper {\n        //           color: ${literal};\n        //         }\n        //       `}</style>\n        //     </>\n        //   );\n        return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: literal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      }\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n  }\n};\n\nvar objectToTreeItem = function objectToTreeItem(object) {\n  return _Object$entries(object).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return __jsx(TreeItem, {\n      nodeId: uuid(),\n      label: key.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, toTreeItems(value));\n  });\n};\n\nvar toTreeItems = function toTreeItems(thing) {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (_JSON$stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport var ObjectTree = function ObjectTree(_ref3) {\n  var object = _ref3.object,\n      literalToTreeItem = _ref3.literalToTreeItem,\n      className = _ref3.className;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }),\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, toTreeItems(object, literalToTreeItem)));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["Head","TreeView","TreeItem","MdExpandMore","MdChevronRight","uuid","literalToTreeItem","literal","toString","objectToTreeItem","object","map","key","value","toTreeItems","thing","ObjectTree","className"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,OAAO,EAAI;AACnC,UAAQ,OAAOA,OAAf;AACE,SAAK,UAAL;AACE,aACE,MAAC,QAAD;AACE,QAAA,MAAM,EAAEF,IAAI,EADd;AAEE,QAAA,KAAK,EAAE;AAAK,mBAAM,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkCE,OAAO,CAACC,QAAR,EAAlC,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF,SAAK,QAAL;AAAe;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEH,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD;AACE,aAAO,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEF,IAAI,EAAtB;AAA0B,QAAA,KAAK,EAAEE,OAAO,CAACC,QAAR,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAhCJ;AAkCD,CAnCD;;AAqCA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM;AAAA,SAC7B,gBAAeA,MAAf,EAAuBC,GAAvB,CAA2B;AAAA;AAAA,QAAEC,GAAF;AAAA,QAAOC,KAAP;;AAAA,WACzB,MAAC,QAAD;AAAU,MAAA,MAAM,EAAER,IAAI,EAAtB;AAA0B,MAAA,KAAK,EAAEO,GAAG,CAACJ,QAAJ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,WAAW,CAACD,KAAD,CADd,CADyB;AAAA,GAA3B,CAD6B;AAAA,CAA/B;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAI,gBAAeA,KAAf,MAA0B,IAA9B,EAAoC,OAAO,2BAAP,CAApC,KACK,OAAON,gBAAgB,CAACM,KAAD,CAAvB;AACN,GAJD,MAIO,OAAOT,iBAAiB,CAACS,KAAD,CAAxB;AACR,CAND;;AAQA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,QAA8C;AAAA,MAA3CN,MAA2C,SAA3CA,MAA2C;AAAA,MAAnCJ,iBAAmC,SAAnCA,iBAAmC;AAAA,MAAhBW,SAAgB,SAAhBA,SAAgB;AACtE,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,GAAG,EAAC,gFAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB;AAEE,IAAA,iBAAiB,EAAE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGE,IAAA,SAAS,EAAEA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,WAAW,CAACJ,MAAD,EAASJ,iBAAT,CALd,CAJF,CADF;AAcD,CAfM","sourcesContent":["import Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint lang-js\">{literal.toString()}</pre>}\n        />\n      );\n    case \"string\": {\n      //\n      // support for coloring rgba strings the color they encode is off for re-usability\n      //\n      // if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n      //   return (\n      //     <>\n      //       <div className=\"rgba-wrapper\">\n      //         <TreeItem nodeId={uuid()} label={literal} />\n      //       </div>\n      //       {/*\n      //        * Using jss because it's the cleanest way to inject these styles.\n      //        * makeStyles doesn't work because it's a hook & style prop is highly discouraged\n      //        */}\n      //       <style jsx>{`\n      //         .rgba-wrapper {\n      //           color: ${literal};\n      //         }\n      //       `}</style>\n      //     </>\n      //   );\n      return <TreeItem nodeId={uuid()} label={literal} />;\n    }\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = object =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = thing => {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, literalToTreeItem, className }) => {\n  return (\n    <>\n      <Head>\n        <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n      </Head>\n      <TreeView\n        defaultCollapseIcon={<MdExpandMore />}\n        defaultExpandIcon={<MdChevronRight />}\n        className={className}\n      >\n        {toTreeItems(object, literalToTreeItem)}\n      </TreeView>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}