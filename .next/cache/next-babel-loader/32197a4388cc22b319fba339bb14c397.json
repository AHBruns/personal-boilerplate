{"ast":null,"code":"var _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          class: \"prettyprint lang-js\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n\n    case \"string\":\n      {\n        if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\")) return __jsx(React.Fragment, null, __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: __jsx(\"pre\", {\n            class: \"prettyprint lang-js\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, literal.toString()),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        })));else return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: literal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n      }\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      });\n  }\n};\n\nconst objectToTreeItem = object => Object.entries(object).map(([key, value]) => __jsx(TreeItem, {\n  nodeId: uuid(),\n  label: key.toString(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, toTreeItems(value)));\n\nconst toTreeItems = thing => {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({\n  object,\n  className\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }),\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, toTreeItems(object)));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["Head","TreeView","TreeItem","MdExpandMore","MdChevronRight","uuid","literalToTreeItem","literal","toString","startsWith","endsWith","objectToTreeItem","object","Object","entries","map","key","value","toTreeItems","thing","JSON","stringify","ObjectTree","className"],"mappings":"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","sourcesContent":["import Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint lang-js\">{literal.toString()}</pre>}\n        />\n      );\n    case \"string\": {\n      if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n        return (\n          <>\n            <div>\n              <TreeItem\n                nodeId={uuid()}\n                label={\n                  <pre class=\"prettyprint lang-js\">{literal.toString()}</pre>\n                }\n              />\n            </div>\n          </>\n        );\n      else return <TreeItem nodeId={uuid()} label={literal} />;\n    }\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = object =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = thing => {\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, className }) => {\n  return (\n    <>\n      <Head>\n        <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n      </Head>\n      <TreeView\n        defaultCollapseIcon={<MdExpandMore />}\n        defaultExpandIcon={<MdChevronRight />}\n        className={className}\n      >\n        {toTreeItems(object)}\n      </TreeView>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}