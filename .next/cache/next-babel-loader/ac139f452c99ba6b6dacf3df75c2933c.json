{"ast":null,"code":"var _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\nconst useStyles = makeStyles({\n  treeView: {\n    marginLeft: \"-12px\"\n  }\n});\n\nconst defaultLiteralToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          class: \"prettyprint\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n  }\n};\n\nconst objectToTreeItem = (object, literalToTreeItem) => Object.entries(object).map(([key, value]) => __jsx(TreeItem, {\n  nodeId: uuid(),\n  label: key.toString(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, toTreeItems(value, literalToTreeItem)));\n\nconst toTreeItems = (thing, customLiteralToTreeItem) => {\n  let literalToTreeItem = customLiteralToTreeItem === undefined ? defaultLiteralToTreeItem : customLiteralToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({\n  object,\n  customLiteralToTreeItem,\n  className\n}) => {\n  const classes = useStyles();\n  return __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }),\n    className: classes.treeView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, toTreeItems(object, customLiteralToTreeItem));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["TreeView","TreeItem","makeStyles","MdExpandMore","MdChevronRight","uuid","useStyles","treeView","marginLeft","defaultLiteralToTreeItem","literal","toString","objectToTreeItem","object","literalToTreeItem","Object","entries","map","key","value","toTreeItems","thing","customLiteralToTreeItem","undefined","JSON","stringify","ObjectTree","className","classes"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAC;AAC3BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AADJ;AADiB,CAAD,CAA5B;;AAMA,MAAMC,wBAAwB,GAAGC,OAAO,IAAI;AAC1C,UAAQ,OAAOA,OAAf;AACE,SAAK,UAAL;AACE,aACE,MAAC,QAAD;AACE,QAAA,MAAM,EAAEL,IAAI,EADd;AAEE,QAAA,KAAK,EAAE;AAAK,UAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BK,OAAO,CAACC,QAAR,EAA1B,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF;AACE,aAAO,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEN,IAAI,EAAtB;AAA0B,QAAA,KAAK,EAAEK,OAAO,CAACC,QAAR,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AATJ;AAWD,CAZD;;AAcA,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,iBAAT,KACvBC,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KACzB,MAAC,QAAD;AAAU,EAAA,MAAM,EAAEd,IAAI,EAAtB;AAA0B,EAAA,KAAK,EAAEa,GAAG,CAACP,QAAJ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGS,WAAW,CAACD,KAAD,EAAQL,iBAAR,CADd,CADF,CADF;;AAOA,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQC,uBAAR,KAAoC;AACtD,MAAIR,iBAAiB,GACnBQ,uBAAuB,KAAKC,SAA5B,GACId,wBADJ,GAEIa,uBAHN;;AAKA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAIG,IAAI,CAACC,SAAL,CAAeJ,KAAf,MAA0B,IAA9B,EAAoC,OAAO,2BAAP,CAApC,KACK,OAAOT,gBAAgB,CAACS,KAAD,EAAQP,iBAAR,CAAvB;AACN,GAJD,MAIO,OAAOA,iBAAiB,CAACO,KAAD,CAAxB;AACR,CAXD;;AAaA,OAAO,MAAMK,UAAU,GAAG,CAAC;AAAEb,EAAAA,MAAF;AAAUS,EAAAA,uBAAV;AAAmCK,EAAAA;AAAnC,CAAD,KAAoD;AAC5E,QAAMC,OAAO,GAAGtB,SAAS,EAAzB;AACA,SACE,MAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB;AAEE,IAAA,iBAAiB,EAAE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGE,IAAA,SAAS,EAAEsB,OAAO,CAACrB,QAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGa,WAAW,CAACP,MAAD,EAASS,uBAAT,CALd,CADF;AASD,CAXM","sourcesContent":["import { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst useStyles = makeStyles({\n  treeView: {\n    marginLeft: \"-12px\"\n  }\n});\n\nconst defaultLiteralToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint\">{literal.toString()}</pre>}\n        />\n      );\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = (object, literalToTreeItem) =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value, literalToTreeItem)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = (thing, customLiteralToTreeItem) => {\n  let literalToTreeItem =\n    customLiteralToTreeItem === undefined\n      ? defaultLiteralToTreeItem\n      : customLiteralToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, customLiteralToTreeItem, className }) => {\n  const classes = useStyles();\n  return (\n    <TreeView\n      defaultCollapseIcon={<MdExpandMore />}\n      defaultExpandIcon={<MdChevronRight />}\n      className={classes.treeView}\n    >\n      {toTreeItems(object, customLiteralToTreeItem)}\n    </TreeView>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}