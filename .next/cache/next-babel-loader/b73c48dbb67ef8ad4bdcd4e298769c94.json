{"ast":null,"code":"var _jsxFileName = \"/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: __jsx(\"pre\", {\n          class: \"prettyprint lang-js\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, literal.toString()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n\n    case \"string\":\n      {\n        //\n        // support for coloring rgba strings the color they encode is off for re-usability\n        //\n        // if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n        //   return (\n        //     <>\n        //       <div className=\"rgba-wrapper\">\n        //         <TreeItem nodeId={uuid()} label={literal} />\n        //       </div>\n        //       {/*\n        //        * Using jss because it's the cleanest way to inject these styles.\n        //        * makeStyles doesn't work because it's a hook & style prop is highly discouraged\n        //        */}\n        //       <style jsx>{`\n        //         .rgba-wrapper {\n        //           color: ${literal};\n        //         }\n        //       `}</style>\n        //     </>\n        //   );\n        return __jsx(TreeItem, {\n          nodeId: uuid(),\n          label: literal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      }\n\n    default:\n      return __jsx(TreeItem, {\n        nodeId: uuid(),\n        label: literal.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n  }\n};\n\nconst objectToTreeItem = (object, _literalToTreeItem) => Object.entries(object).map(([key, value]) => __jsx(TreeItem, {\n  nodeId: uuid(),\n  label: key.toString(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, toTreeItems(value, _literalToTreeItem)));\n\nconst toTreeItems = (thing, _literalToTreeItem) => {\n  const literalToTreeItem = _literalToTreeItem === undefined ? literalToTreeItem : _literalToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return __jsx(React.Fragment, null);else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({\n  object,\n  literalToTreeItem,\n  className\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"script\", {\n    src: \"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), __jsx(TreeView, {\n    defaultCollapseIcon: __jsx(MdExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }),\n    defaultExpandIcon: __jsx(MdChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }),\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, toTreeItems(object, literalToTreeItem)));\n};","map":{"version":3,"sources":["/Users/vonnegut/drive/personal-frontend-boilerplate/components/ObjectTree.jsx"],"names":["Head","TreeView","TreeItem","MdExpandMore","MdChevronRight","uuid","literalToTreeItem","literal","toString","objectToTreeItem","object","_literalToTreeItem","Object","entries","map","key","value","toTreeItems","thing","undefined","JSON","stringify","ObjectTree","className"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,gBAA7C;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,iBAAiB,GAAGC,OAAO,IAAI;AACnC,UAAQ,OAAOA,OAAf;AACE,SAAK,UAAL;AACE,aACE,MAAC,QAAD;AACE,QAAA,MAAM,EAAEF,IAAI,EADd;AAEE,QAAA,KAAK,EAAE;AAAK,UAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkCE,OAAO,CAACC,QAAR,EAAlC,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF,SAAK,QAAL;AAAe;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,MAAC,QAAD;AAAU,UAAA,MAAM,EAAEH,IAAI,EAAtB;AAA0B,UAAA,KAAK,EAAEE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD;AACE,aAAO,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEF,IAAI,EAAtB;AAA0B,QAAA,KAAK,EAAEE,OAAO,CAACC,QAAR,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAhCJ;AAkCD,CAnCD;;AAqCA,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAASC,kBAAT,KACvBC,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KACzB,MAAC,QAAD;AAAU,EAAA,MAAM,EAAEX,IAAI,EAAtB;AAA0B,EAAA,KAAK,EAAEU,GAAG,CAACP,QAAJ,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGS,WAAW,CAACD,KAAD,EAAQL,kBAAR,CADd,CADF,CADF;;AAOA,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQP,kBAAR,KAA+B;AACjD,QAAML,iBAAiB,GACrBK,kBAAkB,KAAKQ,SAAvB,GAAmCb,iBAAnC,GAAuDK,kBADzD;;AAGA,MAAI,OAAOO,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,QAAIE,IAAI,CAACC,SAAL,CAAeH,KAAf,MAA0B,IAA9B,EAAoC,OAAO,2BAAP,CAApC,KACK,OAAOT,gBAAgB,CAACS,KAAD,EAAQZ,iBAAR,CAAvB;AACN,GAJD,MAIO,OAAOA,iBAAiB,CAACY,KAAD,CAAxB;AACR,CATD;;AAWA,OAAO,MAAMI,UAAU,GAAG,CAAC;AAAEZ,EAAAA,MAAF;AAAUJ,EAAAA,iBAAV;AAA6BiB,EAAAA;AAA7B,CAAD,KAA8C;AACtE,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,GAAG,EAAC,gFAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB;AAEE,IAAA,iBAAiB,EAAE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGE,IAAA,SAAS,EAAEA,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGN,WAAW,CAACP,MAAD,EAASJ,iBAAT,CALd,CAJF,CADF;AAcD,CAfM","sourcesContent":["import Head from \"next/head\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { MdExpandMore, MdChevronRight } from \"react-icons/md\";\nimport uuid from \"uuid/v4\";\n\nconst literalToTreeItem = literal => {\n  switch (typeof literal) {\n    case \"function\":\n      return (\n        <TreeItem\n          nodeId={uuid()}\n          label={<pre class=\"prettyprint lang-js\">{literal.toString()}</pre>}\n        />\n      );\n    case \"string\": {\n      //\n      // support for coloring rgba strings the color they encode is off for re-usability\n      //\n      // if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n      //   return (\n      //     <>\n      //       <div className=\"rgba-wrapper\">\n      //         <TreeItem nodeId={uuid()} label={literal} />\n      //       </div>\n      //       {/*\n      //        * Using jss because it's the cleanest way to inject these styles.\n      //        * makeStyles doesn't work because it's a hook & style prop is highly discouraged\n      //        */}\n      //       <style jsx>{`\n      //         .rgba-wrapper {\n      //           color: ${literal};\n      //         }\n      //       `}</style>\n      //     </>\n      //   );\n      return <TreeItem nodeId={uuid()} label={literal} />;\n    }\n    default:\n      return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n  }\n};\n\nconst objectToTreeItem = (object, _literalToTreeItem) =>\n  Object.entries(object).map(([key, value]) => (\n    <TreeItem nodeId={uuid()} label={key.toString()}>\n      {toTreeItems(value, _literalToTreeItem)}\n    </TreeItem>\n  ));\n\nconst toTreeItems = (thing, _literalToTreeItem) => {\n  const literalToTreeItem =\n    _literalToTreeItem === undefined ? literalToTreeItem : _literalToTreeItem;\n\n  if (typeof thing === \"object\") {\n    // don't render empty objects\n    if (JSON.stringify(thing) === \"{}\") return <></>;\n    else return objectToTreeItem(thing, literalToTreeItem);\n  } else return literalToTreeItem(thing);\n};\n\nexport const ObjectTree = ({ object, literalToTreeItem, className }) => {\n  return (\n    <>\n      <Head>\n        <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n      </Head>\n      <TreeView\n        defaultCollapseIcon={<MdExpandMore />}\n        defaultExpandIcon={<MdChevronRight />}\n        className={className}\n      >\n        {toTreeItems(object, literalToTreeItem)}\n      </TreeView>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}