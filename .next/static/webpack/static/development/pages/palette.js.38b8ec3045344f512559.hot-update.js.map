{"version":3,"file":"static/webpack/static/development/pages/palette.js.38b8ec3045344f512559.hot-update.js","sources":["webpack:///./pages/palette.jsx"],"sourcesContent":["import Head from \"next/head\";\nimport { TreeItem } from \"@material-ui/lab\";\nimport { useTheme, Divider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport uuid from \"uuid/v4\";\nimport { makePageTitle } from \"../utils/helpers\";\nimport { ObjectTree } from \"../components/ObjectTree\";\n\nconst useStyles = makeStyles({\n  wrapper: {\n    padding: \"32px\"\n  },\n  header: {},\n  preBlock: {\n    margin: \"16px\",\n    borderRadius: \"4px\",\n    fontFamily: \"Source Code Pro\",\n    border: \"1px solid black\",\n    borderRadius: \"4px\",\n    padding: \"4px 10px\",\n    overflowX: \"scroll\"\n  }\n});\n\nexport default () => {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  return (\n    <>\n      <Head>\n        <title>{makePageTitle(\"Palette\")}</title>\n      </Head>\n      <div className={classes.wrapper}>\n        <Typography variant=\"h5\">Explainer</Typography>\n        <Divider />\n        <Typography variant=\"body1\">\n          Below is the global MaterialUI theme object used throughout this\n          project. Any styles which are used in more than one place or are\n          expected to be used in more than one place throughout this codebase\n          should be defined via this theme object rather than via in-line\n          styles. When injecting one-off styles, developers should use this\n          preference order:\n          <ol>\n            <li>MaterialUI makeStyles</li>\n            <li>jss</li>\n            <li>style props</li>\n          </ol>\n        </Typography>\n        <Typography variant=\"h5\">Theme</Typography>\n        <Divider />\n        <ObjectTree\n          object={theme}\n          customLiteralToTreeItem={literal => {\n            switch (typeof literal) {\n              case \"function\":\n                return (\n                  <>\n                    <Head>\n                      <link\n                        href=\"https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap\"\n                        rel=\"stylesheet\"\n                      />\n                    </Head>\n                    <TreeItem\n                      nodeId={uuid()}\n                      label={\n                        <pre className={`${classes.preBlock}`}>\n                          <code\n                            className={`language-javascript ${classes.codeBlock}`}\n                          >\n                            {literal.toString()}\n                          </code>\n                        </pre>\n                      }\n                    />\n                  </>\n                );\n              case \"string\": {\n                if (literal.startsWith(\"rgba(\") && literal.endsWith(\")\"))\n                  return (\n                    <>\n                      <div className=\"rgba-wrapper\">\n                        <TreeItem nodeId={uuid()} label={literal} />\n                      </div>\n                      {/*\n                       * Using jss because it's the cleanest way to inject these styles.\n                       * makeStyles doesn't work because it's a hook & style prop is highly discouraged\n                       */}\n                      <style jsx>{`\n                        .rgba-wrapper {\n                          color: ${literal};\n                        }\n                      `}</style>\n                    </>\n                  );\n                return <TreeItem nodeId={uuid()} label={literal} />;\n              }\n              default:\n                return <TreeItem nodeId={uuid()} label={literal.toString()} />;\n            }\n          }}\n        />\n      </div>\n    </>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AAgBA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7CA;AA+CA;AAlDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDA;;;;A","sourceRoot":""}